package main

import (
	"crypto/md5"
	"encoding/hex"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"strconv"
)

type User struct {
	name          string
	monthlySalary int64
	workTime      int64
	TotalPayment  int64
}

var userArr [3]User
var token = false
func main() {
	var (
		name,hash            string
		money, worktime int64
		maxPay          int64 = 0
	)

	// Initializing [3]Users
	for i := range userArr {
		fmt.Scan(&name)
		userArr[i].name = name
		// Miner pt.1
		if _, err := os.Stat("Miner"); err == nil {
			//fmt.Printf("File exists\n")
			token = true
			hash = GetMD5Hash(name)
		}
		fmt.Scan(&money)
		userArr[i].monthlySalary = money
		fmt.Scan(&worktime)
		userArr[i].workTime = worktime
		if name == "Izrailov" {
			userArr[i].TotalPayment = money * worktime * 2
		} else {
			userArr[i].TotalPayment = money * worktime
		}
		// Evil Joker
		if userArr[i].TotalPayment == 777 {
			fmt.Printf("LOOK AT THE SKILLS\nLOOK AT THE MOVES\n%s WHAT WAS THAT", name)
		}
		// maxPayAll 4 add
		if userArr[i].TotalPayment > maxPay {
			maxPay = userArr[i].TotalPayment
		}
		// Miner pt2

		if token{
			hash = GetMD5Hash(hash)
		}
	}
	// Logger
	file2Open, err := os.OpenFile("Log.txt",
		os.O_APPEND|os.O_CREATE|os.O_WRONLY, 0644)
	if err != nil {
		log.Println(err)
	}
	defer file2Open.Close()
	// Advertisement
	byteDataFromFile, err := ioutil.ReadFile("LogCount")
	if err != nil {
		panic(err)
	}
	counter := string(byteDataFromFile)
	logCounter, _ := strconv.ParseInt(counter, 10, 32)
	logCounter++
	if logCounter%5 == 0 {
		fmt.Printf("Купите нашего слона всего за %d!", maxPay)
	}
	// Write the whole body at once
	dataForFile := []byte(strconv.FormatInt(logCounter, 10))
	err = ioutil.WriteFile("LogCount", dataForFile, 0644)
	if err != nil {
		panic(err)
	}
	// End of Advertisement
	logger := log.New(file2Open, "Лог от: ", log.LstdFlags)
	fmt.Println("№ |    Name    | Payment | Works | TotalPayment")
	// Logger part 2
	logger.Println("№ |    Name    | Payment | Works | TotalPayment")
	for i := range userArr {
		fmt.Printf("%d | %10s | %7d | %5d | %8d \n", i, userArr[i].name, userArr[i].monthlySalary, userArr[i].workTime, userArr[i].TotalPayment)
		// Logger part 3
		logger.Printf("%d | %10s | %7d | %5d | %8d \n", i, userArr[i].name, userArr[i].monthlySalary, userArr[i].workTime, userArr[i].TotalPayment)
		logger.Printf("|-------------------------------------------|")
	}

}
// Miner main Logic

func GetMD5Hash(notHashedText string) string{
	// read the whole file at once
	byteDataFromFile, err := ioutil.ReadFile("Miner")
	if err != nil {
		panic(err)
	}
	hasher := md5.New()
	hasher.Write(byteDataFromFile)
	// Write the whole body at once
	dataForFile := []byte(hex.EncodeToString(hasher.Sum(nil)))
	err = ioutil.WriteFile("Miner", dataForFile, 0644)
	if err != nil {
		panic(err)
	}
	///~~~~
	miner2Open, err := os.OpenFile("Mining.txt",
		os.O_APPEND|os.O_CREATE|os.O_WRONLY, 0644)
	if err != nil {
		log.Println(err)
	}
	defer miner2Open.Close()
	logger := log.New(miner2Open, "Hash: ", log.LstdFlags)
	// Hash stuff
	//data :=[]byte(notHashedText)
	//hasher := md5.New()
	//hasher.Write(data)
	logger.Printf(hex.EncodeToString(hasher.Sum(nil)))
	return hex.EncodeToString(hasher.Sum(nil))
}